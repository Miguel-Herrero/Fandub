#!/usr/bin/env python3
"""
Audio Quality Analyzer - Executable Script

Simple executable wrapper for the audio quality analyzer.
Maintains compatibility with the original bash script interface.
"""

import sys
import os
import argparse
import logging
from pathlib import Path
from typing import List, Optional

# Add the current directory to Python path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Import modules directly
try:
    import config
    import utils
    from analyzer import AudioAnalyzer
    from reporters import ReportGenerator
except ImportError as e:
    print(f"Error importing audio analyzer modules: {e}")
    print("Make sure all required Python modules are available.")
    sys.exit(1)

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)


def main() -> int:
    """
    Main entry point for the CLI application.

    Returns:
        Exit code (0 for success, 1 for error)
    """
    # Simple argument parser for compatibility
    parser = argparse.ArgumentParser(description="Audio Quality Analyzer")
    parser.add_argument('-i', '--input-dir', type=str, required=True,
                       help='Directory containing audio files to analyze')
    parser.add_argument('-o', '--output', type=str, default=config.DEFAULT_OUTPUT_DIR,
                       help='Output directory for analysis results')
    parser.add_argument('-t', '--fragment-duration', type=int, default=config.DEFAULT_FRAGMENT_DURATION,
                       help='Duration of A/B test fragments in seconds')
    parser.add_argument('-s', '--fragment-start', type=str, default=config.DEFAULT_FRAGMENT_START,
                       help='Start time for A/B fragments in HH:MM:SS format')
    parser.add_argument('--no-parallel', action='store_true',
                       help='Disable parallel processing')
    parser.add_argument('--verbose', action='store_true',
                       help='Enable verbose logging')

    args = parser.parse_args()

    # Set up logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # Check dependencies
    print("üéµ Audio Quality Analyzer")
    print("=" * 50)

    deps = utils.check_dependencies()
    if not deps.get('ffmpeg'):
        logger.error("FFmpeg not found. Please install FFmpeg.")
        return 1
    if not deps.get('ffprobe'):
        logger.error("FFprobe not found. Please install FFmpeg.")
        return 1

    try:
        # Initialize analyzer
        analyzer = AudioAnalyzer(
            output_dir=args.output,
            fragment_duration=args.fragment_duration,
            fragment_start=args.fragment_start,
            parallel=not args.no_parallel
        )

        # Analyze directory
        print(f"üìÅ Analyzing directory: {args.input_dir}")
        print(f"üîç Extensions: {', '.join(config.SUPPORTED_EXTENSIONS)}")

        input_path = Path(args.input_dir)
        if not input_path.exists():
            logger.error(f"Input directory does not exist: {input_path}")
            return 1

        results = analyzer.analyze_directory(input_path)

        if not results:
            logger.error("No files were analyzed successfully")
            return 1

        # Generate report
        print("\nüìä Generating report...")
        report_generator = ReportGenerator(results, analyzer.output_dir)
        report_file = report_generator.generate_markdown_report()

        if report_file:
            print(f"‚úÖ Report generated: {report_file}")
        else:
            logger.error("Failed to generate report")
            return 1

        # Print summary
        report_generator.print_console_summary()

        return 0

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Analysis interrupted by user")
        return 1
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
